import fs from "node:fs";
import path from "node:path";

const rootDir = path.resolve(import.meta.dirname, "..");

const packageJsonPath = path.resolve(rootDir, "package.json");

const packageJson = JSON.parse(
  await fs.promises.readFile(packageJsonPath, { encoding: "utf-8" }),
);

const JS_EXT = ".ts";

const NOOP = "./src/util/false" + JS_EXT;

const imports: Record<string, any> = {};
imports["#src/third_party/jpgjs/jpg.js"] = "./src/third_party/jpgjs/jpg.js";
imports["#src/*.js"] = "./src/*.ts";
imports["#src/*"] = "./src/*";
imports["#tests/fixtures/msw"] = {
  node: "./tests/fixtures/msw_node.ts",
  default: "./tests/fixtures/msw_browser.ts",
};
imports["#tests/fixtures/gl"] = {
  node: "./tests/fixtures/gl_node.ts",
  default: "./tests/fixtures/gl_browser.ts",
};
imports["#tests/*.js"] = "./tests/*.ts";
imports["#testdata/*"] = "./testdata/*";

async function listSubdirs(dir: string): Promise<string[]> {
  return (await fs.promises.readdir(dir, { withFileTypes: true }))
    .filter((e) => e.isDirectory())
    .map((e) => e.name);
}

async function writeModule(modulePath: string, imports: string[]) {
  await fs.promises.writeFile(
    modulePath,
    "// DO NOT EDIT: Generated by config/update_conditions.ts\n" +
      imports.map((name) => `import ${JSON.stringify(name)};\n`).join(""),
    { encoding: "utf-8" },
  );
}

async function handleDrivers(
  kind: string,
  moduleMap: Record<string, string[]>,
) {
  const driverDir = path.resolve(rootDir, "src", kind);
  const drivers = await listSubdirs(driverDir);
  const modules: Record<string, string[]> = {};
  for (const driver of drivers) {
    for (const [filePrefix, moduleKinds] of Object.entries(moduleMap)) {
      const sourcePrefix = `./src/${kind}/${driver}/${filePrefix}`;
      if (
        await fs.promises
          .stat(path.resolve(rootDir, `${sourcePrefix}.ts`))
          .catch(() => undefined)
      ) {
        const source = sourcePrefix + JS_EXT;
        const conditions: Record<string, string> = {};
        if (driver === "python") {
          conditions["neuroglancer/python"] = source;
          conditions.default = NOOP;
        } else {
          if (filePrefix === "register_credentials_provider") {
            conditions["neuroglancer/python"] = NOOP;
          }
          conditions[`neuroglancer/${kind}/${driver}:enabled`] = source;
          conditions[`neuroglancer/${kind}:none_by_default`] = NOOP;
          conditions[`neuroglancer/${kind}/${driver}:disabled`] = NOOP;
          conditions.default = source;
        }
        let moduleId = `#${kind}/${driver}`;
        if (filePrefix !== "index") {
          moduleId += `/${filePrefix}`;
        }
        imports[moduleId] = conditions;
        for (const moduleKind of moduleKinds) {
          if (modules[moduleKind] === undefined) {
            modules[moduleKind] = [];
          }
          modules[moduleKind].push(moduleId);
        }
      }
    }
  }
  for (const [moduleKind, moduleIds] of Object.entries(modules)) {
    await writeModule(
      path.resolve(driverDir, `enabled_${moduleKind}_modules.ts`),
      moduleIds,
    );
  }
}

await handleDrivers("datasource", {
  backend: ["backend"],
  async_computation: ["async_computation"],
  register_default: ["frontend"],
  register_credentials_provider: ["frontend"],
});

await handleDrivers("kvstore", {
  register: ["frontend", "backend"],
  register_frontend: ["frontend"],
  register_backend: ["backend"],
  register_credentials_provider: ["frontend"],
});

await handleDrivers("layer", {
  index: ["frontend"],
});

// main entrypoint.
imports["#main"] = {
  "neuroglancer/python": "./src/main_python" + JS_EXT,
  default: "./src/main" + JS_EXT,
};

// main entrypoint.
imports["#python_integration_build"] = {
  "neuroglancer/python": "./src/util/true" + JS_EXT,
  default: NOOP,
};

packageJson.imports = imports;

packageJson.exports = {
  ".": "./src/main_module.ts",
  "./unstable/*.js": "./src/*.ts",
  "./unstable/*": "./src/*",
};

const tempPackageJsonPath = packageJsonPath + ".tmp";

await fs.promises.writeFile(
  tempPackageJsonPath,
  JSON.stringify(packageJson, undefined, 2) + "\n",
  { encoding: "utf-8" },
);
await fs.promises.rename(tempPackageJsonPath, packageJsonPath);
